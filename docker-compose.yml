# Questo file definisce e orchestra l'intera architettura a 3 servizi.

services:
  # Servizio 1: Il nostro database/registro distribuito
  etcd:
    image: gcr.io/etcd-development/etcd:v3.5.5
    container_name: etcd-compose
    command:
      - /usr/local/bin/etcd
      - --name=etcd0
      - --advertise-client-urls=http://etcd:2379
      - --listen-client-urls=http://0.0.0.0:2379
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "ETCDCTL_API=3 etcdctl --endpoints=http://127.0.0.1:2379 endpoint health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Servizio 2: La nostra Certificate Authority online
  ca-server:
    # Costruisce l'immagine dal Dockerfile specifico
    build:
      context: .
      dockerfile: ca-server/Dockerfile
    container_name: ca-server-compose
    # Parte solo dopo che etcd è in salute
    depends_on:
      etcd:
        condition: service_healthy
    ports:
      # Espone la porta del servizio CA per il client
      - "8000:8000"
    environment:
      # Passiamo la configurazione tramite variabili d'ambiente
      ETCD_ENDPOINT: "http://etcd:2379"
      RUST_LOG: info
    networks:
      - app-network
    # Aggiungiamo un healthcheck anche per la CA
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Servizio 3: Il nostro server di registrazione dispositivi
  registration-server:
    build:
      context: .
      dockerfile: registration-server/Dockerfile
    container_name: registration-server-compose
    # Parte solo dopo che etcd è in salute
    depends_on:
      etcd:
        condition: service_healthy
    ports:
      - "8443:8443"
      - "9000:9000"
    environment:
      ETCD_ENDPOINT: "http://etcd:2379"
      RUST_LOG: info
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

# Definiamo la rete privata che i nostri servizi useranno per comunicare
networks:
  app-network:
    driver: bridge